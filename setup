#!/bin/bash
# A simple script to set up the environment and install dependencies.

# --- Dependency Checks ---

echo "--- Checking Prerequisites ---"

# Check for Python 3
if ! command -v python3 &> /dev/null; then
    echo "❌ [ERROR] 'python3' could not be found."
    echo "Please install Python 3 from https://www.python.org/downloads/ and try again."
    exit 1
fi
echo "✅ Python 3 found."

# Check for Docker
if ! command -v docker &> /dev/null; then
    echo "❌ [ERROR] 'docker' could not be found."
    echo "Please install Docker Desktop from https://www.docker.com/products/docker-desktop and try again."
    exit 1
fi
echo "✅ Docker found."

# Check for Git
if ! command -v git &> /dev/null; then
    echo "❌ [ERROR] 'git' could not be found."
    echo "Attempting to install git..."
    if [[ "$(uname -s)" == "Darwin" ]]; then
        # On macOS, git is often installed via Xcode Command Line Tools, which brew can trigger.
        brew install git
    elif command -v apt-get &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y git
    elif command -v dnf &> /dev/null; then
        sudo dnf install -y git
    else
        echo "Could not install git automatically. Please install it manually."
        exit 1
    fi
fi
echo "✅ Git found."

# Check for Homebrew on macOS (for mkcert)
if [[ "$(uname -s)" == "Darwin" ]] && ! command -v brew &> /dev/null; then
    echo "❌ [ERROR] 'brew' (Homebrew) is not installed."
    echo "Please install it from https://brew.sh/ and try again."
    exit 1
fi
echo "--------------------------"
echo ""


# Function to install mkcert
install_mkcert() {
    echo "Checking for mkcert..."
    OS="$(uname -s)"

    case "${OS}" in
        Linux*)
            echo "Detected Linux OS."
            if ! command -v mkcert &> /dev/null; then
                if command -v apt-get &> /dev/null; then
                    echo "mkcert not found. Attempting to install with apt-get..."
                    sudo apt-get update && sudo apt-get install -y libnss3-tools mkcert
                elif command -v dnf &> /dev/null; then
                    echo "mkcert not found. Attempting to install with dnf..."
                    sudo dnf install -y nss-tools mkcert
                else
                    echo "Could not determine package manager. Please install 'mkcert' manually."
                    exit 1
                fi
            fi
            ;;
        Darwin*)
            echo "Detected macOS."
            if ! command -v mkcert &> /dev/null; then
                echo "mkcert not found. Installing with Homebrew..."
                brew install mkcert
            fi
            ;;
        *)
            echo "Unsupported OS: ${OS}. Please install 'mkcert' manually."
            exit 1
            ;;
    esac
    
    # After installing mkcert, ensure its local CA is trusted.
    if command -v mkcert &> /dev/null; then
        echo "✅ mkcert is installed. Ensuring local CA is trusted..."
        # This command might prompt for the user's password.
        mkcert -install
    else
        echo "❌ [ERROR] mkcert installation failed. Please try installing it manually."
        exit 1
    fi
}

# --- Main script ---

# 1. Install mkcert
install_mkcert

# 2. Install Poetry and dependencies
echo -e "\n--- Setting up Python Environment with Poetry ---"
if ! command -v poetry &> /dev/null; then
    echo "Poetry not found. Installing Poetry..."
    curl -sSL https://install.python-poetry.org | python3 -
    # Add poetry to the path for the current session
    export PATH="$HOME/.local/bin:$PATH"
    echo "Poetry installed. You may need to restart your shell for the PATH change to take effect globally."
fi

echo "✅ Poetry is available."

echo "Installing project dependencies with Poetry... (This may take a moment)"
# The poetry.toml file now handles all virtualenv configuration.
# We just need to run install within an isolated subshell to avoid
# conflicts with any externally activated virtual environments.
(
  unset VIRTUAL_ENV
  poetry install --no-ansi
)

# Make the wrapper script executable
chmod +x easy-opal

echo -e "\n✅ Setup complete! The environment is ready."
echo "You can now run the tool using the './easy-opal' wrapper script."
echo "For example, to start the setup wizard, run:"

# ANSI escape codes
BOLD_YELLOW='\033[1;33m'
NC='\033[0m'
echo -e "${BOLD_YELLOW}./easy-opal setup${NC}" 